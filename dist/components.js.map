{"version":3,"sources":["../src/components.js"],"names":[],"mappings":"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","file":"components.js","sourcesContent":["/** \n * Straight forward JavaScript Components. Designed to work with SilverStripe but can be used anywhere \n * \n * Example\n * ```javascript\n * import Components from \"ss-components\";\n * \n * // standard components\n * import SideMenu from \"./js/components/SideMenu.js\";\n * import Title from \"./js/components/Title.js\";\n * \n * // diagram components types \n * import BarDiagram from './js/components/BarDiagram.js';\n * \n * // register components\n * Components.register('side-menu', SideMenu);\n * Components.register('tooltip', Tooltip);\n * \n * // register diagrams\n * Components.register('BarDiagram', BarDiagram);\n * \n * //attaching all components\n * Components.attach();\n * ```\n * \n * along with HTML code \n * \n * ```html\n * <div id=\"diagram1\" data-component=\"BarDiagram\" data-json=\"1.json\">...</div>\n * <nav id=\"sidemenu\" data-component=\"side-menu\">...</nav>\n * <nav id=\"tooltip\"  data-component=\"tooltip\">...</nav>\n * ```\n */\nclass Components {\n\n    /**\n     * Attach name of component to class. \n     * @example\n     * import Components from \"ss-components\";\n     * \n     * class Banner {\n     *   constructor(el, data) { \n     *     console.log(el, data);\n     *   }\n     * }\n     * \n     * Components.register('banner', Banner);\n     * Components.attach();\n     * \n     * //now each <div data-component=\"banner\" data-index=\"1\">...</div>\n     * //will be attached, and console.log woudl return <div> and object { data:\"banner\", index:1 }\n     * @param {string} type - name of component.\n     * @param {class} classObj - this is a value.\n     */\n\n    static register(type, classObj) {\n        this._classNames[type] = classObj;\n    }\n\n    /**\n     *  attaches all registred components and creates new classes, attached components will be omited \n     */\n    static attach() {\n        let elementList = Array.prototype.slice.call(document.querySelectorAll('[data-component]'));\n\n        elementList.forEach(element => {\n            let data = element.dataset;\n\n            if (data.attached) {\n                return\n            } else {\n                element.dataset.attached = true;\n            }\n\n            /** FIXME \n             * potential memory leak \n             * find a way to remove elements out of DOM\n             */\n            if (this._classNames[data.component]) {\n                let n = this._components.length;\n                let id = element.id;\n                let component = new this._classNames[data.component](element, data);\n                component.id = id;\n                component.__el = element;\n                this._components[n] = component;\n                if (id) {\n                    this._componentsIds[id] = component;\n                }\n            } else {\n                console.log(data.component + ' component is missing');\n            }\n        });\n\n    }\n\n\n    /**\n     * Returns all registered class names as object, key is name, value is class\n     */\n    static get classNames() {\n        return this._classNames;\n    }\n\n    /**\n     * Returns all attached components\n     */\n    static get components() {\n        return this._components;\n    }\n\n\n    /**\n     * Returns component by node id \n     * @param {string} id \n     * @return {object} class instance  \n     * @example\n     * import Components from \"ss-components\";\n     * \n     * class Banner {\n     *   constructor(el, data) { \n     *     console.log(el, data);\n     *   }\n     * }\n     * \n     * Components.register('banner', Banner);\n     * Components.attach();\n     * \n     * //lets assume there is and `<div id=\"banner-1\" data-component=\"banner\">...</div>`\n     * \n     * let banner1 = Components.getById('banner-1'); //returns an instance of banner \n     * \n     */\n    static getById(id) {\n        return this._componentsIds[id];\n    }\n\n     /**\n     * Returns components list by class name \n     * @param {string} id \n     * @return {array} all instances by class name \n     * @example\n     * import Components from \"ss-components\";\n     * \n     * class Banner {\n     *   constructor(el, data) { \n     *     console.log(el, data);\n     *   }\n     * }\n     * \n     * Components.register('banner', Banner);\n     * Components.attach();\n     * \n     * //lets assume there are  \n     * `<div id=\"banner-1\" data-component=\"banner\">...</div>`\n     * `<div id=\"banner-2\" data-component=\"banner\">...</div>`\n     * `<div id=\"banner-3\" data-component=\"banner\">...</div>`\n     * \n     * let banners = Components.getByName('banner'); //returns an instances of `data-component=\"banner\"`\n     * \n     */\n    static getByName(name) {\n\n        var results = [];\n        for (var key in this._components) {\n            if (this._components[key].data.component === name) {\n                results.push(this._components[key]);\n            }\n        }\n        return results;\n\n    }\n\n     /**\n     * Returns components list by class name \n     * @param {string} id \n     * @return {array} all instances by type name \n     * @example\n     * import Components from \"ss-components\";\n     * \n     * class Banner {\n     *   constructor(el, data) { \n     *     console.log(el, data);\n     *   }\n     * }\n     * \n     * Components.register('banner', Banner);\n     * Components.attach();\n     * \n     * //lets assume there are  \n     * `<div id=\"banner-1\" data-component=\"banner\">...</div>`\n     * `<div id=\"banner-2\" data-component=\"banner\">...</div>`\n     * `<div id=\"banner-3\" data-component=\"banner\">...</div>`\n     * \n     * let banners = Components.getById('Banners'); //returns an instances of `Banner` class\n     * \n     */\n    static getByType(type) {\n\n        var results = [];\n        for (var key in this._components) {\n            if (this._components[key].constructor.name === type) {\n                results.push(this._components[key]);\n            }\n        }\n        return results;\n\n    }\n\n    /**\n     * Returns component by node element\n     * @param {Element} el \n     * @return {object} class instance \n     * @example\n     * import Components from \"ss-components\";\n     * \n     * class Banner {\n     *   constructor(el, data) { \n     *     console.log(el, data);\n     *   }\n     * }\n     * \n     * Components.register('banner', Banner);\n     * Components.attach();\n     * \n     * //lets assume there is and `<div id=\"banner-1\" data-component=\"banner\">...</div>`\n     * \n     * let node = document.getElementById('banner-1');\n     * let banner1 = Components.getByEl(node); //returns an instance of banner \n     * \n     */\n\n    static getByEl(el) {\n        for (var key in this._components) {\n            if (this._components[key].__el == el) {\n                return this._components[key];\n            }\n        }\n    }\n\n    \n    /**\n     * Performs a test `window.document.contains(component.el)` and removes all references to \n     * components, so it would garbage collectored. \n     * If component has method `destory`, it will be called \n     */\n    static dettachFromDOM() {\n        this._components = this._components.filter((component)=>{\n\n            let test = window.document.contains(component.el);\n\n            if (!test) {\n                if (component.hasOwnProperty('destroy') && typeof test.destroy == 'function') {\n                    test.destroy();\n                }\n                if (component.id) {\n                    this._componentsIds[id] = null;\n                    delete this._componentsIds[id];\n                }\n            }\n\n            return test;\n            \n        });\n        \n    }\n\n}\n\nComponents._components = [];\nComponents._componentsIds = {};\nComponents._classNames = {}\n\nexport default Components;\nmodule.exports = Components;"]}